// <auto-generated />
using System;
using Booking.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Booking.Infrastructure.Migrations
{
    [DbContext(typeof(BookingContext))]
    [Migration("20240805033544_InitialBookingDbMigration")]
    partial class InitialBookingDbMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Booking.Domain.AggregatesModel.AppointmentAggregate.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("_appointmentDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("AppointmentDate");

                    b.Property<DateTime?>("_approvalDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ApprovalDate");

                    b.Property<int?>("_approverId")
                        .HasColumnType("int")
                        .HasColumnName("ApproverId");

                    b.Property<string>("_issue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Issue");

                    b.Property<int>("_patientId")
                        .HasColumnType("int")
                        .HasColumnName("PatientId");

                    b.HasKey("Id");

                    b.HasIndex("_approverId");

                    b.HasIndex("_patientId");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("Booking.Domain.AggregatesModel.ApproverAggregate.Approver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IdentityGuid")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Approvers");
                });

            modelBuilder.Entity("Booking.Domain.AggregatesModel.PatientAggregate.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Patients", (string)null);
                });

            modelBuilder.Entity("Booking.Domain.AggregatesModel.AppointmentAggregate.Appointment", b =>
                {
                    b.HasOne("Booking.Domain.AggregatesModel.ApproverAggregate.Approver", null)
                        .WithMany()
                        .HasForeignKey("_approverId");

                    b.HasOne("Booking.Domain.AggregatesModel.PatientAggregate.Patient", null)
                        .WithMany()
                        .HasForeignKey("_patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
